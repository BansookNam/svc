/*
 * Copyright 2018 NAVER Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */package com.naver.android.svc.compiler

import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec

import javax.lang.model.element.Modifier

class ScreenExtendsGenerator(private val packageName: String, private val screenAnnotatedClass: ScreenAnnotatedClass) {

    private val createControlTowerMethodSpec: MethodSpec
        get() = MethodSpec.methodBuilder("createControlTower")
            .addAnnotation(Override::class.java)
            .addModifiers(Modifier.PUBLIC)
            .addStatement(
                String.format("return new %s()", screenAnnotatedClass.controlTowerName))
            .returns(screenAnnotatedClass.controlTower)
            .build()

    private val createViewsMethodSpec: MethodSpec
        get() = MethodSpec.methodBuilder("createViews")
            .addAnnotation(Override::class.java)
            .addModifiers(Modifier.PUBLIC)
            .addStatement(String.format("return new %s()", screenAnnotatedClass.baseViewName))
            .returns(screenAnnotatedClass.baseView)
            .build()

    private val controlTowerMethodSpec: MethodSpec
        get() = MethodSpec.methodBuilder("getControlTower")
            .addModifiers(Modifier.PUBLIC)
            .addStatement(
                "return (\$L) getBaseControlTower()", screenAnnotatedClass.controlTowerName)
            .returns(screenAnnotatedClass.controlTower)
            .build()

    private val viewsMethodSpec: MethodSpec
        get() = MethodSpec.methodBuilder("getViews")
            .addModifiers(Modifier.PUBLIC)
            .addStatement("return (\$L) getBaseViews()", screenAnnotatedClass.baseViewName)
            .returns(screenAnnotatedClass.baseView)
            .build()

    private val extendsName: String
        get() = "SVC_" + this.screenAnnotatedClass.clazzName

    fun generate(): TypeSpec {
        val builder = TypeSpec.classBuilder(extendsName)
            .addJavadoc(
                "Generated by SVC processor. (https://github.com/naver/svc). Don't change this class.")
            .addModifiers(Modifier.PUBLIC)
            .addModifiers(Modifier.ABSTRACT)
            .addMethod(createViewsMethodSpec)
            .addMethod(createControlTowerMethodSpec)
            .addMethod(viewsMethodSpec)
            .addMethod(controlTowerMethodSpec)
            .superclass(this.screenAnnotatedClass.superClass)
        return builder.build()
    }
}
